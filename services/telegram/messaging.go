package telegram

import (
	"encoding/json"
	"fmt"
	"jira_notifier/config"
	"jira_notifier/models"
	"log"
	"os"
)

func SendSimpleUpdatedIssueMessage(notification models.Notification) {
	filepath := getCoverForUpdatedIssue(notification.Issue, notification.ChangeSets)

	sendUpdatedIssueMessage(notification.Issue, notification.User, filepath)
}

func SendCommentsUpdatedIssueMessage(issue models.Issue, user models.User) {
	filepath := getCoverForUpdatedCommentsIssue(issue)
	sendUpdatedIssueMessage(issue, user, filepath)
}

func sendUpdatedIssueMessage(issue models.Issue, user models.User, filepath string) {
	buttons := map[string]interface{}{
		"inline_keyboard": [][]interface{}{
			{map[string]interface{}{"text": "üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", "url": issue.GetLink()}},
		},
	}

	replyMarkup, err := json.Marshal(buttons)

	if err != nil {
		panic(err)
	}

	err = SendTelegramCustomMessageWithImage(map[string]string{
		"chat_id":      fmt.Sprintf("%v", user.ChatID),
		"caption":      fmt.Sprintf("üîÑ *–û–±–Ω–æ–≤–ª–µ–Ω–æ*  %v %v\n\n", issue.Tag, issue.Title),
		"parse_mode":   "markdown",
		"reply_markup": string(replyMarkup),
	}, filepath)

	if err != nil {
		log.Printf("error when send notification for %v issue\n", issue.Tag)
	}

	os.Remove(filepath)
}

func SendAssigneeIssueMessage(issue models.Issue, user models.User) {

	filepath := getCoverForNewIssue(issue)

	buttons := map[string]interface{}{
		"inline_keyboard": [][]interface{}{
			{map[string]interface{}{"text": "üîó –û—Ç–∫—Ä—ã—Ç—å –∑–∞–¥–∞—á—É", "url": issue.GetLink()}},
		},
	}

	replyMarkup, err := json.Marshal(buttons)

	if err != nil {
		panic(err)
	}

	err = SendTelegramCustomMessageWithImage(map[string]string{
		"chat_id": fmt.Sprintf("%v", user.ChatID),
		"caption": fmt.Sprintf(""+
			"üÜï *–ù–∞–∑–Ω–∞—á–µ–Ω–æ*  %v %v\n\n"+
			"*–ê–≤—Ç–æ—Ä*: %v\n"+
			"*–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç*: %v\n", issue.Tag, issue.Title, issue.Author, issue.Priority),
		"parse_mode":   "markdown",
		"reply_markup": string(replyMarkup),
	}, filepath)

	if err != nil {
		log.Printf("error when send notification for %v issue\n", issue.Tag)
	}

	os.Remove(filepath)
}

func SendTokenMessage(user models.User) {
	SendTelegramCustomMessage(map[string]interface{}{
		"chat_id":    user.ChatID,
		"text":       fmt.Sprintf("–ü—Ä–∏–≤–µ—Ç, %v! –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Jira.", user.Name),
		"parse_mode": "markdown",
		"reply_markup": map[string]interface{}{
			"inline_keyboard": [][]interface{}{
				{map[string]interface{}{"text": "üîó –°–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω", "url": config.CFG.Jira.JiraPersonalTokenPageLink}},
			},
		},
	})
}

func SendTokenSuccessMessage(user models.User) {
	SendTelegramPlainMessage(
		fmt.Sprintf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %v –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. "+
			"–ù–∞—á–∞—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.", user.JiraUsername),
		user.ChatID,
	)
}
